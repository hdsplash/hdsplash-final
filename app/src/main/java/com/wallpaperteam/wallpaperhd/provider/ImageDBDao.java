package com.wallpaperteam.wallpaperhd.provider;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_DB".
*/
public class ImageDBDao extends AbstractDao<ImageDB, Long> {

    public static final String TABLENAME = "IMAGE_DB";

    /**
     * Properties of entity ImageDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Author = new Property(1, String.class, "author", false, "AUTHOR");
        public final static Property Category = new Property(2, Integer.class, "category", false, "CATEGORY");
        public final static Property Color = new Property(3, String.class, "color", false, "COLOR");
        public final static Property Date = new Property(4, Integer.class, "date", false, "DATE");
        public final static Property DisplayDate = new Property(5, Integer.class, "displayDate", false, "DISPLAY_DATE");
        public final static Property Featured = new Property(6, Integer.class, "featured", false, "FEATURED");
        public final static Property Identifier = new Property(7, String.class, "identifier", false, "IDENTIFIER");
        public final static Property Loved = new Property(8, Integer.class, "loved", false, "LOVED");
        public final static Property Width = new Property(9, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(10, Integer.class, "height", false, "HEIGHT");
        public final static Property ModifiedDate = new Property(11, Long.class, "modifiedDate", false, "MODIFIED_DATE");
        public final static Property Platform = new Property(12, String.class, "platform", false, "PLATFORM");
        public final static Property Thumbnail = new Property(13, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property Url = new Property(14, String.class, "url", false, "URL");
    };


    public ImageDBDao(DaoConfig config) {
        super(config);
    }
    
    public ImageDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AUTHOR\" TEXT," + // 1: author
                "\"CATEGORY\" INTEGER," + // 2: category
                "\"COLOR\" TEXT," + // 3: color
                "\"DATE\" INTEGER," + // 4: date
                "\"DISPLAY_DATE\" INTEGER," + // 5: displayDate
                "\"FEATURED\" INTEGER," + // 6: featured
                "\"IDENTIFIER\" TEXT," + // 7: identifier
                "\"LOVED\" INTEGER," + // 8: loved
                "\"WIDTH\" INTEGER," + // 9: width
                "\"HEIGHT\" INTEGER," + // 10: height
                "\"MODIFIED_DATE\" INTEGER," + // 11: modifiedDate
                "\"PLATFORM\" TEXT," + // 12: platform
                "\"THUMBNAIL\" TEXT," + // 13: thumbnail
                "\"URL\" TEXT);"); // 14: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_DB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImageDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        Integer category = entity.getCategory();
        if (category != null) {
            stmt.bindLong(3, category);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(4, color);
        }
 
        Integer date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date);
        }
 
        Integer displayDate = entity.getDisplayDate();
        if (displayDate != null) {
            stmt.bindLong(6, displayDate);
        }
 
        Integer featured = entity.getFeatured();
        if (featured != null) {
            stmt.bindLong(7, featured);
        }
 
        String identifier = entity.getIdentifier();
        if (identifier != null) {
            stmt.bindString(8, identifier);
        }
 
        Integer loved = entity.getLoved();
        if (loved != null) {
            stmt.bindLong(9, loved);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(10, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(11, height);
        }
 
        Long modifiedDate = entity.getModifiedDate();
        if (modifiedDate != null) {
            stmt.bindLong(12, modifiedDate);
        }
 
        String platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindString(13, platform);
        }
 
        String thumbnail = entity.getThumbnail();
        if (thumbnail != null) {
            stmt.bindString(14, thumbnail);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(15, url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ImageDB readEntity(Cursor cursor, int offset) {
        ImageDB entity = new ImageDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // category
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // color
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // date
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // displayDate
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // featured
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // identifier
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // loved
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // width
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // height
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // modifiedDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // platform
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // thumbnail
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImageDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategory(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setColor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDisplayDate(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setFeatured(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIdentifier(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLoved(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setWidth(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setHeight(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setModifiedDate(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setPlatform(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setThumbnail(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ImageDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ImageDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
